Web App Testing Automation
Selenium with Ruby testing stack

[Opening] take 2
Hello, everyone! 
I welcome you to today’s episode of Coding Playground. Continuing with the exciting journey of automated web application testing I will explore the use of Ruby tech stack. Typically these types of projects are called end-to-end automation frameworks and they mainly depend on a browser automation tool and a programming language of choice, which, I have chosen to be the Ruby Programming language

Tags: “End-to-End testing automation“, “Browser automation”, “Ruby”, “Selenium WebDriver”, “Rake”, “Minitest”, “Minitest-Reporters”

[General Approach]


Web applications use a web browser to launch an application or game. We need to build a virtual user that can use the browser application just like you or I would. My approach involves using the following tools:
browser control tool "Selenium WebDriver", to impersonate a real life user.
Ruby programming language to tell the Selenium WebDriver what actions to do
Minitest testing framework describe the browser actions, which will form the tests that for our web app
Minitest-Reporters to make pretty printed reports of minitest results
Rake to use one liner commands in order to run one or many tests and any other automation tasks. It will work as the command center console of the framework
Let me break down the roles of each tool

[Tools and Libraries]


"Selenium WebDriver: This tool allows us to automate actions in the browser by impersonating the actions of a real user. It's the driving force behind your interactions with web applications and web pages in Chrome, Firefox, Safari, and others. It supports being used from multiple programming languages and this flexibility allows programmers to choose the language they are most comfortable with. I will use the Ruby Programming language.
"Ruby: I chose Ruby because it seemed that I'll be able to start running code quickly and ruby code looked comparatively more readable compared to Java. I felt that I should be able to extend existing Ruby code and start writing my own code. Also I found enough Supportive Community and Documentation to make me feel comfortable in starting programming.
"Minitest: I chose minitest because it appears to be easy to set up and integrate with Ruby. From examples I felt confident in writing my basic tests quickly.
Minitest-Reporters: I added this after running a test for the first time. All I saw on the screen was a green dot showing that the test passed. Minitest-reporters is a separate gem ( extension pack ) that enhances the reporting capabilities of Minitest “dots”
"Rake: Rake allows you to define and automate tasks related to your testing framework, such as running groups of test called test-suites. Also it uses Ruby syntax so I won't have to learn YASL (yet-another-scripting-language)

[Inspirational Anecdote]
"So far it seems that this browser automation thing is beginning to look like having a robot sidekick – it never gets tired, never complains, and always follows instructions. If only our pets were as obedient! Or could impersonate us on the internet browser . . . nottt"




[Inspirational Anecdote]
Remember, in the world of automation, every line of code you write is a step toward a more efficient and reliable testing process. Embrace the power of automation, and let your tests be the guardians of quality!

[Inspirational Anecdote]
So far it feels like test automation is not just about saving time—it's about empowering developers and testers to focus on creativity and innovation. Yeah, leave the grunt work for the automation framework while you create awesome web apps.

[Humorous Quips]
Why do programmers prefer automation? Because it's the only time they enjoy watching something work on repeat without errors!

[Humorous Quips]
Automation: where robots do the heavy lifting, and we get to enjoy our coffee a bit longer! Who said testing can't have a sense of humor? Cheers to error-free code and automated success!

[Closing]
So! automation not only helps save time, it helps raise the quality and reliability of your applications. I hope you've gained insights into the seamless collaboration of Selenium, Ruby, Rake, Minitest, and Minitest-Reporters in creating a testing framework for web applications. 
That's a wrap for our end-to-end web application testing adventure! If you enjoyed this journey, don't forget to like, subscribe, and hit that notification bell. 
Happy coding, and may your tests be evergreen! Until next time, stay automated!
Happy testing, and may your code always run flawlessly!
